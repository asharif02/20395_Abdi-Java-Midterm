***ANSWER ALL THE QUESTIONS BELOW***

1. What is a programming language?
Answer: A programming language is a type of written language that tells computers what to
        do in order to work. Java and Python are examples of programming languages.

2. What is a JDK composed of? Define each component?
Answer: A JDK (Java Development Kit) is composed of the Java Runtime Environment (JRE), an Interpreter/Loader (JAVA),
        a Compiler (javac), an Archiver (JAR) and a Documentation generator (javadoc).

            Java Runtime Environment (JRE) - part of the Java Development Kit (JDK). Java Runtime Environment (JRE)
            consists of the Java Virtual Machine (JVM), supporting libraries and core classes. The Java Virtual
            Machine (JVM) is basically the runtime engine of Java.

            Interpreter (JAVA) - last step of JVM. It loads, checks and runs the code

            Compiler (javac) - reads source files written in Java and compiles them into bytecode class files

            Archiver (JAR) - stands for Java ARchive. A JAR file is a file that contains a compressed version of
                            .class files, audio files, image files or directories

            Documentation generator (javadoc) - documentation tool for Java. The document created is in HTML
                                                format and describes the API (application programming interface)

3. What is an IDE?
Answer: An IDE (Integrated Development Environment) is a form of text editor used to write and organize code very
        easily. IntelliJ and Eclipse are some examples of an IDE.

4. What are some of the most popular Java IDEs available in the market?
Answer: IntelliJ, Eclipse and NetBeans are some of the most popular Java IDEs available for use (personal
        opinion: IntelliJ's aesthetic beats every IDE that exists)

5. Explain the entire java life cycle.
Answer: Java Life Cycle:
            - Starts at the IDE (Integrated Development Environment); which is basically a code/text editor
            - The .java file that contains our source code is sent to a Compiler
            - The Compiler changes our .java source file (written in English) into a .class file (written in bytecode)
              so the JVM (Java Virtual Machine) can read and execute it
            - Once we have the .class file the Compiler created, it goes to a Class Loader that verifies the bytecode
            - After being verified, the .class file travels to the Interpreter which loads, runs and checks the code
            - Finally, our bytecode is executed by the JVM

        In Summary:
            - We are taking our human-readable code (English) and sending it to a Compiler which turns it into
              machine-readable code (1's and 0's). The bytecode generated by the Compiler is read and executed by
              the JVM.

6. What is a class?
Answer: A class is a blueprint used to create objects.

7. What is an object?
Answer: An object is an item/member/instance of a Java class. When you create an object, you are creating an
        "instance" of a class, therefore "instantiating" a class.

8. What is the entry point of a Java project?
Answer: The main() method is the entry point of a Java project because it's the first bit of code that's called
        when you run your program.

9. Why is the main() method static?
Answer: The main() method is static, so you can call on the method WITHOUT having to create an object.

10. Which class is the superclass of all classes?
Answer: The Object class because all classes in Java "extend" from the Object class by default.

11. What is difference between path and classpath variables?
Answer: path variable is used to set the path for all Java software tools while classpath is used to set
        the path for java classes

12. What is the difference between an Interface and Abstract class?
Answer: There are MANY differences between an Interface and Abstract class, but here are a few:
            - Abstract class declared using "abstract" keyword while Interface is declared using "interface" keyword
            - Abstract class can be inherited using "extends" keyword while Interface can only be implemented using
              "implements" keyword
            - A class can extend only one abstract class while a class can implement multiple interfaces
            - An Abstract class provides default code that must be overridden while an Interface is abstract, so it
              can't provide any code

13. Can you make an Object from an Interface and Abstract class? If yes or no, how would you do it?
Answer: No, we cannot create objects from an Interface and Abstract class.

14. What is Access Modifier?
Answer: Access Modifiers are used to define the accessibility and scope of a class or data variable. In Java, an
        access modifier MUST be specified whenever a variable or method is being defined.

15. What is OOP? Define each OOP concept.
Answer: For starters, OOP stands for Object-Oriented Programming. OOP is all about creating objects that contain
        both data and methods. The main OOP concepts include Abstraction, Encapsulation, Inheritance and
        Polymorphism.

            Abstraction -

            Encapsulation -

            Inheritance -

            Polymorphism -

What is Java Package and which package is imported by default?
Answer:

What is an API? List some APIs that you have used so far.
Answer:

Does java support multiple inheritance? Why or why not?
Answer:

What is method overloading? List all the different ways to overload.
Answer:

Explain exceptions in java and how to handle them.
Answer:

What is static keyword? When and how do we use it?
Answer:

What is final keyword? When and how do we use it?
Answer:

Explain the difference between final, finally and finalize?
Answer:

What is a constructor?
Answer:

Can we have multiple constructors in a class?
Answer:

If we don't have a constructor declared, what is called during the object creation?
Answer:

What is "this" keyword in Java? When would we use it?
Answer:

What is "super" keyword in Java? What are some scenarios we would use it?
Answer:

What does JVM stand for?
Answer:

Is JVM platform independent?
Answer:

What version of Java are you using?
Answer:

What does JAR stand for?
Answer:

What is the difference between JDK and JVM?
Answer:

What is the difference between JVM and JRE?
Answer:

Explain the difference between compile-time and run-time?
Answer:

What is heap?
Answer:

How does Java manage its memory?
Answer:

What is the difference between String, StringBuffer and StringBuilder?
Answer:

What is Singleton class?
Answer:

What is Serialization and Deserialization?
Answer:

Explain the difference between While and Do-While loops?
Answer:

What is Enum?
Answer:

What is Iterator?
Answer:

Which one will take more memory: an int or Integer? Why?
Answer:

Why are Strings considered to be immutable in Java?
Answer:

What is constructor chaining in Java?
Answer:

The difference between Serial and Parallel Garbage Collector?
Answer:

What does JIT stand for?
Answer:

Explain the process of Java garbage collection?
Answer:

Can you guarantee the garbage collection process?
Answer:

What is the difference between stack and heap in Java?
Answer:

What is reflection in Java and why is it useful?
Answer:

What is multithreading in Java?
Answer:

What is synchronization in Java?
Answer:

What is a Framework?
Answer:

What are the testing Frameworks available in Java?
Answer:

What are jUnit and testNG?
Answer:

What are the dependencies for this project?
Answer:

What is dependency injection in Java?
Answer:

Explain what static binding and dynamic binding is?
Answer: