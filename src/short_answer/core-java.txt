***ANSWER ALL THE QUESTIONS BELOW***

1. What is a programming language?
Answer: A programming language is a type of written language that tells computers what to
        do in order to work. Java and Python are examples of programming languages.

2. What is a JDK composed of? Define each component?
Answer: A JDK (Java Development Kit) is composed of the Java Runtime Environment (JRE), an Interpreter/Loader (JAVA),
        a Compiler (javac), an Archiver (JAR) and a Documentation generator (javadoc).

            Java Runtime Environment (JRE) - part of the Java Development Kit (JDK). Java Runtime Environment (JRE)
            consists of the Java Virtual Machine (JVM), supporting libraries and core classes. The Java Virtual
            Machine (JVM) is basically the runtime engine of Java.

            Interpreter (JAVA) - last step of JVM. It loads, checks and runs the code

            Compiler (javac) - reads source files written in Java and compiles them into bytecode class files

            Archiver (JAR) - stands for Java ARchive. A JAR file is a file that contains a compressed version of
                            .class files, audio files, image files or directories

            Documentation generator (javadoc) - documentation tool for Java. The document created is in HTML
                                                format and describes the API (application programming interface)

3. What is an IDE?
Answer: An IDE (Integrated Development Environment) is a form of text editor used to write and organize code very
        easily. IntelliJ and Eclipse are some examples of an IDE.

4. What are some of the most popular Java IDEs available in the market?
Answer: IntelliJ, Eclipse and NetBeans are some of the most popular Java IDEs available for use (personal
        opinion: IntelliJ's aesthetic beats every IDE that exists)

5. Explain the entire java life cycle.
Answer: Java Life Cycle:
            - Starts at the IDE (Integrated Development Environment); which is basically a code/text editor
            - The .java file that contains our source code is sent to a Compiler
            - The Compiler changes our .java source file (written in English) into a .class file (written in bytecode)
              so the JVM (Java Virtual Machine) can read and execute it
            - Once we have the .class file the Compiler created, it goes to a Class Loader that verifies the bytecode
            - After being verified, the .class file travels to the Interpreter which loads, runs and checks the code
            - Finally, our bytecode is executed by the JVM

        In Summary:
            - We are taking our human-readable code (English) and sending it to a Compiler which turns it into
              machine-readable code (1's and 0's). The bytecode generated by the Compiler is read and executed by
              the JVM.

6. What is a class?
Answer: A class is a blueprint used to create objects.

7. What is an object?
Answer: An object is an item/member/instance of a Java class. When you create an object, you are creating an
        "instance" of a class, therefore "instantiating" a class.

8. What is the entry point of a Java project?
Answer: The main() method is the entry point of a Java project because it's the first bit of code that's called
        when you run your program.

9. Why is the main() method static?
Answer: The main() method is static, so you can call on the method WITHOUT having to create an object.

10. Which class is the superclass of all classes?
Answer: The Object class because all classes in Java "extend" from the Object class by default.

11. What is difference between path and classpath variables?
Answer: path variable is used to set the path for all Java software tools while classpath is used to set
        the path for java classes

12. What is the difference between an Interface and Abstract class?
Answer: There are MANY differences between an Interface and Abstract class, but here are a few:
            - Abstract class declared using "abstract" keyword while Interface is declared using "interface" keyword
            - Abstract class can be inherited using "extends" keyword while Interface can only be implemented using
              "implements" keyword
            - A class can extend only one abstract class while a class can implement multiple interfaces
            - An Abstract class provides default code that must be overridden while an Interface is abstract, so it
              can't provide any code

13. Can you make an Object from an Interface and Abstract class? If yes or no, how would you do it?
Answer: No, we cannot create objects from an Interface and Abstract class.

14. What is Access Modifier?
Answer: Access Modifiers are used to define the accessibility and scope of a class or data variable. In Java, an
        access modifier MUST be specified whenever a variable or method is being defined.

15. What is OOP? Define each OOP concept.
Answer: For starters, OOP stands for Object-Oriented Programming. OOP is all about creating objects that contain
        both data and methods. The main OOP concepts include Abstraction, Encapsulation, Inheritance and
        Polymorphism.

            Abstraction - using simple things (objects, classes and variables) to represent complexity

            Encapsulation - data hiding by making fields in a class private. You can access those private fields
                            later via public methods.

            Inheritance - allows you to create new classes that share some attributes of existing classes

            Polymorphism - same name but different forms. Two common forms are Method Overloading and Method
                           Overriding. Method overloading is when methods in the same class have the exact same name
                           but take different parameters. Method overriding is replacing a method that previously
                           existed in the parents class.

16. What is Java Package and which package is imported by default?
Answer: A Java Package is like a folder in a file directory. It's used to group related classes.

17. What is an API? List some APIs that you have used so far.
Answer: API stands for Application Programming Interface, and it allows applications to talk to each other. Amazon,
        the Weather App and Google Maps are some APIs I have used (not sure if this is what you meant or not).

18. Does java support multiple inheritance? Why or why not?
Answer: No, Java does not support multiple inheritance. Reason is to prevent ambiguity (uncertainty/vagueness in
        meaning).

19. What is method overloading? List all the different ways to overload.
Answer: Method overloading is when methods in the same class have the exact same name but take different parameters.
        This can be done by changing:
            - the number of parameters
            - the data types of the parameters
            - the order of parameters

20. Explain exceptions in java and how to handle them.
Answer: Exceptions are events that occur during the execution process that disrupts the normal flow of the program.
        Try-Catch is the simplest way to handle exceptions; you put the code you want to run in the try block, and
        any exceptions that are thrown by Java are caught by one or more catch blocks.

21. What is static keyword? When and how do we use it?
Answer: Static keyword means that the particular member belongs to a type itself, rather than to an instance of that
        type. Static is used to share the same variable or method of a given class. You can think of static like a
        joint bank account.

22. What is final keyword? When and how do we use it?
Answer: Final keyword is a non-access modifier used for classes, attributes and methods. Final is used when you want
        to define an entity that can only be assigned ONCE.

23. Explain the difference between final, finally and finalize?
Answer: Differences between final, finally and finalize:

            final - keyword and access modifier used to apply restrictions on a class, method or variable

            finally - block in Java Exception Handling to execute the important code regardless of whether the
                      exception occurs or not

            finalize - method of Object class. It performs cleanup operations on unmanaged resources held by the
                       current object before the object is destroyed

24. What is a constructor?
Answer: A constructor is a special method that is used to initialize objects.

25. Can we have multiple constructors in a class?
Answer: Yes you can. They can also have the same exact name (method overloading), you just need to make sure the
        parameters are different.

26. If we don't have a constructor declared, what is called during the object creation?
Answer: If we don't declare any constructors, Java will automatically create a default constructor for us during
        object creation.

27. What is "this" keyword in Java? When would we use it?
Answer: The "this" keyword in Java refers to the current object in a method or constructor. We would use it when
        objects in the method/constructor have the same name as the class attributes and parameters. Ultimately, we
        want to eliminate any confusion whatsoever, that's why we use the "this" keyword.

28. What is "super" keyword in Java? What are some scenarios we would use it?
Answer: The "super" keyword is used to access methods of the parent class. If a subclass had the same method name
        as a method in the superclass, we would use the "super" keyword to avoid any confusion and differentiate the
        methods.

29. What does JVM stand for?
Answer: JVM stands for Java Virtual Machine

30. Is JVM platform independent?
Answer: No, it is platform DEPENDENT. Every JVM is designed for a different OS (operating system).

31. What version of Java are you using?
Answer: I'm using Java version 11

32. What does JAR stand for?
Answer: JAR stands for Java ARchive

33. What is the difference between JDK and JVM?
Answer: JDK (Java Development Kit) is a software development kit needed to create Java programs while the JVM (Java
        Virtual Machine) converts the bytecode to machine instructions.

34. What is the difference between JVM and JRE?
Answer: JVM (Java Virtual Machine) is responsible for converting bytecode to machine instructions while JRE (Java
        Runtime Environment) are libraries needed to run Java programs.

35. Explain the difference between compile-time and run-time?
Answer: Compile-time is the period when the programming code (ex. Java) is converted to machine code (1's and 0's) while
        Run-time is when the program is actually running and usually occurs after compile-time.

36. What is heap?
Answer: Basically, heap is a place in memory that is used to store objects. It doesn't matter where the object
        is created in code, it is ALWAYS stored in the heap.

37. How does Java manage its memory?
Answer: Java manages its memory through a process of allocating and de-allocating objects. Java uses an automatic
        memory management system called the garbage collector.

38. What is the difference between String, StringBuffer and StringBuilder?
Answer: Difference between String, StringBuffer and StringBuilder:

            String - object that contain a sequence of characters. Strings are immutable (cannot be changed).

            StringBuffer - mutable. Used in a multithreaded environment. Slower than StringBuilder but faster than
                           String.

            StringBuilder - mutable as well. Used in a single-threaded environment. Faster than StringBuffer

39. What is Singleton class?
Answer: A singleton class is a class that can only have one object at a time.

40. What is Serialization and Deserialization?
Answer: Serialization converts the state of an object into a byte stream while Deserialization does the opposite
        where the byte stream is used to recreate the actual Java object in memory.

41. Explain the difference between While and Do-While loops?
Answer: The difference between While and Do-While loops are:

            While Loops
                - used when we need to repeatedly execute a block of statements
                - considered a "repeating if statement"
                - used when the number of iterations is not fixed
                - condition-based

            Do-While Loops
                - always runs at least once REGARDLESS of the condition
                - "DO this first and WHILE this is true, keep looping"

42. What is Enum?
Answer: Enum stands for enumeration and is a special "class" that represents a group of constants. Use enum keyword
        to create an enum, amd separate the constants with a comma (constants should also be in UPPERCASE).

43. What is Iterator?
Answer: Iterators are used to traverse each and every element in a collection.

44. Which one will take more memory: an int or Integer? Why?
Answer: Integer will take more memory because it's an object (128 bits / 16 bytes) while int is a primitive data
        type (32 bits / 4 bytes).

45. Why are Strings considered to be immutable in Java?
Answer: In the String constant pool, a String object is likely to have one or many references. If several references
        point to the same String without even knowing it, it would be bad if one of the references modified that String
        value. That's why String objects are immutable.

46. What is constructor chaining in Java?
Answer: Constructor chaining in Java is basically the process of calling a sequence of constructors. We can do this
        in two ways:
            - using this() keyword for chaining constructors in the same class
            - using super() keyword for chaining constructors from the parent class

47. The difference between Serial and Parallel Garbage Collector?
Answer: The main difference between Serial and Parallel Garbage Collector is that Serial Garbage Collector uses a
        SINGLE thread for the garbage collection process while the Parallel Garbage Collector uses MULTIPLE threads
        for the garbage collection.

48. What does JIT stand for?
Answer: JIT stands for Just-In-Time

49. Explain the process of Java garbage collection?
Answer: Java garbage collection is the process by which Java programs perform automatic memory management. Java
        programs compile to bytecode that can be run on a Java Virtual Machine (JVM). When Java programs run on the
        JVM, objects are created on the heap, which is a portion of memory dedicated to the program. Eventually,
        some objects will no longer be needed. The garbage collector finds these unused objects and deletes them to
        free up memory.

50. Can you guarantee the garbage collection process?
Answer: No, garbage collection cannot guarantee that your application will not run out of memory.

51. What is the difference between stack and heap in Java?
Answer: Difference between stack and heap:

            Stack - is used to store local variables and function call

            Heap - is a place in memory that is used to store objects. It doesn't matter where the object
                   is created in code, it is ALWAYS stored in the heap.

52. What is reflection in Java and why is it useful?
Answer:

53. What is multithreading in Java?
Answer: Multithreading allows the execution of multiple parts of a program at the same time. This ultimately leads to
        maximum utilization of the CPU by multitasking.

54. What is synchronization in Java?
Answer: Synchronization is the capability to control the access of multiple threads to any shared resource.

55. What is a Framework?
Answer: In terms of programming, a framework is a tool that provides ready-made components or solutions that are
        customized in order to speed up development. Some popular test automation frameworks include Selenium, Cypress,
        Cucumber and more.

56. What are the testing Frameworks available in Java?
Answer: The testing frameworks available in Java are Selenium, TestNG, JUnit, and more.

57. What are jUnit and testNG?
Answer: JUnit is an open-source regression testing framework that is mainly used to execute unit testing, speed up
        programming and improve the quality of code in Java. TestNG is a popular and powerful Java testing framework
        used for integration, functional and unit testing.

58. What are the dependencies for this project?
Answer: The dependencies for this Java Midterm project are:
            - gson
            - jackson-annotations
            - jackson-core
            - jackson-databind
            - java-json
            - javax.json
            - mongo-java-driver
            - mysql-connector-java
            - protobuf-java
            - testng

59. What is dependency injection in Java?
Answer: Dependency injection is the concept in which objects get other required objects from outside.

60. Explain what static binding and dynamic binding is?
Answer: Static binding happens at compile-time while dynamic binding happens at runtime. The binding of overloaded
        methods is static and the binding of overridden methods are dynamic.